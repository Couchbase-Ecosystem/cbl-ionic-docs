"use strict";(self.webpackChunkcbl_ionic=self.webpackChunkcbl_ionic||[]).push([[473],{8276:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(4848),s=t(8453);const i={id:"documents",sidebar_position:7},o="Documents",c={id:"documents",title:"Documents",description:"Description \u2014 Couchbase Lite Concepts - Data Model - Documents",source:"@site/docs/documents.md",sourceDirName:".",slug:"/documents",permalink:"/documents",draft:!1,unlisted:!1,editUrl:"https://github.com/Couchbase-Ecosystem/cbl-ionic-docs/docs/documents.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"documents",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Scopes and Collections",permalink:"/scopes-collections"},next:{title:"Blobs",permalink:"/blobs"}},r={},l=[{value:"Overview",id:"overview",level:2},{value:"Document Structure",id:"document-structure",level:3},{value:"Data Encoding",id:"data-encoding",level:3},{value:"Data Types",id:"data-types",level:3},{value:"JSON",id:"json",level:3},{value:"Constructing a Document",id:"constructing-a-document",level:2},{value:"Data Model",id:"data-model",level:3},{value:"Open a Database",id:"open-a-database",level:3},{value:"Create a Document",id:"create-a-document",level:3},{value:"Create a Dictionary",id:"create-a-dictionary",level:3},{value:"Create an Array",id:"create-an-array",level:3},{value:"Populate a Document",id:"populate-a-document",level:3},{value:"Save a Document",id:"save-a-document",level:3},{value:"Close the Database",id:"close-the-database",level:3},{value:"Working with Data",id:"working-with-data",level:2},{value:"Date accessors",id:"date-accessors",level:3},{value:"Example 1. Date Getter",id:"example-1-date-getter",level:4},{value:"Using Dictionaries",id:"using-dictionaries",level:3},{value:"Example 2. Read Only",id:"example-2-read-only",level:4},{value:"Example 3. Mutable",id:"example-3-mutable",level:4},{value:"Using Arrays",id:"using-arrays",level:3},{value:"Example 4. Read Only",id:"example-4-read-only",level:4},{value:"Example 5. Mutable",id:"example-5-mutable",level:4},{value:"Using Blobs",id:"using-blobs",level:3},{value:"Document Initializers",id:"document-initializers",level:2},{value:"Example 6. Persist a document",id:"example-6-persist-a-document",level:4},{value:"Document change events",id:"document-change-events",level:2},{value:"Document Constraints",id:"document-constraints",level:2},{value:"Example 13. Reserved Keys List",id:"example-13-reserved-keys-list",level:4}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"documents",children:"Documents"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Description \u2014 ",(0,a.jsx)(n.em,{children:"Couchbase Lite Concepts - Data Model - Documents"}),(0,a.jsx)(n.br,{}),"\n","Related Content \u2014 ",(0,a.jsx)(n.a,{href:"/databases",children:"Databases"})," | ",(0,a.jsx)(n.a,{href:"/blobs",children:"Blobs"})," | ",(0,a.jsx)(n.a,{href:"indexing.md",children:"Indexing"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.h3,{id:"document-structure",children:"Document Structure"}),"\n",(0,a.jsx)(n.p,{children:"In Couchbase Lite the term 'document' refers to an entry in the database. You can compare it to a record, or a row in a table."}),"\n",(0,a.jsx)(n.p,{children:"Each document has an ID or unique identifier. This ID is similar to a primary key in other databases."}),"\n",(0,a.jsx)(n.p,{children:"You can specify the ID programmatically. If you omit it, it will be automatically generated as a UUID."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Couchbase documents are assigned to a Collection. The ID of a document must be unique within the Collection it is written to. You cannot change it after you have written the document."})}),"\n",(0,a.jsx)(n.p,{children:"The document also has a value which contains the actual application data. This value is stored as a dictionary of key-value (k-v) pairs. The values can be made of up several different Data Types such as numbers, strings, arrays, and nested objects."}),"\n",(0,a.jsx)(n.h3,{id:"data-encoding",children:"Data Encoding"}),"\n",(0,a.jsxs)(n.p,{children:["The document body is stored in an internal, efficient, binary form called ",(0,a.jsx)(n.a,{href:"https://github.com/couchbase/fleece#readme",children:"Fleece"}),". This internal form can be easily converted into a manageable native dictionary format for manipulation in applications."]}),"\n",(0,a.jsx)(n.p,{children:"Fleece data is stored in the smallest format that will hold the value whilst maintaining the integrity of the value."}),"\n",(0,a.jsx)(n.h3,{id:"data-types",children:"Data Types"}),"\n",(0,a.jsx)(n.p,{children:"The Document class offers a set of property accessors for various scalar types, such as:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Boolean"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Date"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Double"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Float"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Int"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Long"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"String"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These accessors take care of converting to/from JSON encoding, and make sure you get the type you expect."}),"\n",(0,a.jsx)(n.p,{children:"In addition to these basic data types Couchbase Lite provides for the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dictionary"})," - Represents a read-only key-value pair collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"MutableDictionary"})," - Represents a writeable key-value pair collection."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Array"})," - Represents a writeable collection of objects."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"MutableArray"})," - Represents a writeable collection of objects."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Blob"})," - Represents an arbitrary piece of binary data."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"json",children:"JSON"}),"\n",(0,a.jsx)(n.p,{children:"Couchbase Lite also provides for the direct handling of JSON data implemented in most cases by the provision of a ToJSON() method on appropriate API classes (for example, on MutableDocument, Dictionary, Blob and Array)\u2009\u2014\u2009see Working with JSON Data."}),"\n",(0,a.jsx)(n.h2,{id:"constructing-a-document",children:"Constructing a Document"}),"\n",(0,a.jsx)(n.p,{children:"An individual document often represents a single instance of an object in application code. A document might be considered equivalent to a row in a relational table; with each of the document's attributes being equivalent to a column."}),"\n",(0,a.jsx)(n.p,{children:"Documents can contain nested structures. This allows developers to express many-to-many relationships without requiring a reference or junction table; and is naturally expressive of hierarchical data."}),"\n",(0,a.jsx)(n.p,{children:"Most apps will work with one or more documents, persisting them to a local database and optionally syncing them, either centrally or to the cloud."}),"\n",(0,a.jsx)(n.p,{children:"In this section we provide an example of how you might create a hotel document, which provides basic contact details and price data."}),"\n",(0,a.jsx)(n.h3,{id:"data-model",children:"Data Model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"hotel: {\n  type: string (value = `hotel`)\n  name: string\n  address: dictionary {\n    street: string\n    city: string\n    state: string\n    country: string\n    code: string\n  }\n  phones: array\n  rate: float\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"open-a-database",children:"Open a Database"}),"\n",(0,a.jsx)(n.p,{children:"First open your database. If the database does not already exist, Couchbase Lite will create it for you."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const myDatabase = new Database('myDatabaseName', config);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://cbl-ionic.dev/databases",children:"Databases"})," for more information."]}),"\n",(0,a.jsx)(n.h3,{id:"create-a-document",children:"Create a Document"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"let document = new MutableDocument(hotel.id);\n"})}),"\n",(0,a.jsx)(n.p,{children:"For more on using Documents, see Document Initializers and Mutability."}),"\n",(0,a.jsx)(n.h3,{id:"create-a-dictionary",children:"Create a Dictionary"}),"\n",(0,a.jsx)(n.p,{children:"Now create a mutable dictionary (address)."}),"\n",(0,a.jsx)(n.p,{children:"Each element of the dictionary value will be directly accessible via its own key."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Create a new MutableDocument instance\nconst document = new MutableDocument();\n\n// Now, populate the document as if it's a dictionary named 'address'\ndocument.setString('address.street', '1 Main st.');\ndocument.setString('address.city', 'San Francisco');\ndocument.setString('address.state', 'CA');\ndocument.setString('address.country', 'USA');\ndocument.setString('address.code', '90210');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-an-array",children:"Create an Array"}),"\n",(0,a.jsx)(n.p,{children:"Since the hotel may have multiple contact numbers, provide a field (phones) as a mutable array."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create an instance of MutableDocument\nconst hotelInfo = new MutableDocument();\n\n// Since `setArray` method accepts an array, directly pass the contact numbers as an array\nhotelInfo.setArray("phones", ["650-000-0000", "650-000-0001"]);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"populate-a-document",children:"Populate a Document"}),"\n",(0,a.jsx)(n.p,{children:"Now add your data to the mutable document created earlier. Each data item is stored as a key-value pair."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Assuming address and phones are already defined as shown in previous examples\nconst address = {\n  street: "1 Main st.",\n  city: "San Francisco",\n  state: "CA",\n  country: "USA",\n  code: "90210"\n};\n\nconst phones = ["650-000-0000", "650-000-0001"];\n\n// Create an instance of MutableDocument\nlet hotelInfo = new MutableDocument();\n\n// Add document type and hotel name as string\nhotelInfo.setString("type", "hotel");\nhotelInfo.setString("name", "Hotel Java Mo");\n\n// Add average room rate (float)\nhotelInfo.setFloat("room_rate", 121.75);\n\n// Add address (dictionary)\nhotelInfo.setDictionary("address", address);\n\n// Add phone numbers (array)\nhotelInfo.setArray("phones", phones);\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Couchbase recommend using a type attribute to define each logical document type."})}),"\n",(0,a.jsx)(n.h3,{id:"save-a-document",children:"Save a Document"}),"\n",(0,a.jsx)(n.p,{children:"With the document now populated, we can persist to our Couchbase Lite database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await collection.save(document);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"close-the-database",children:"Close the Database"}),"\n",(0,a.jsx)(n.p,{children:"With your document saved, you can now close our Couchbase Lite database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"database.close();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"working-with-data",children:"Working with Data"}),"\n",(0,a.jsx)(n.h3,{id:"date-accessors",children:"Date accessors"}),"\n",(0,a.jsx)(n.p,{children:"Couchbase Lite offers Date accessors as a convenience. Dates are a common data type, but JSON doesn\u2019t natively support them, so the convention is to store them as strings in ISO-8601 format."}),"\n",(0,a.jsx)(n.h4,{id:"example-1-date-getter",children:"Example 1. Date Getter"}),"\n",(0,a.jsx)(n.p,{children:"This example sets the date on the createdAt property and reads it back using the Document.getDate() accessor method."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create an instance of MutableDocument\nlet document = new MutableDocument();\n\n// Set the current date on the "createdAt" property\ndocument.setDate("createdAt", new Date());\n\n// Get the Date \nconst date = document.getDate("createdAt");\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-dictionaries",children:"Using Dictionaries"}),"\n",(0,a.jsx)(n.h4,{id:"example-2-read-only",children:"Example 2. Read Only"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Get a document by ID\nconst doc: Document = collection.document('doc1');\n\n// Getting a dictionary from the document's properties\nconst addressDict = doc.getDictionary('address');\n\n// Access a value with a key from the dictionary\nconst street = addressDict?.getString('street');\n\n// Iterate over the dictionary\nObject.keys(addressDict || {}).forEach(key => {\n  console.log(`Key ${key} = ${addressDict[key]}`);\n});\n\n// Create a mutable copy\nconst mutableDict = { ...addressDict };\n"})}),"\n",(0,a.jsx)(n.h4,{id:"example-3-mutable",children:"Example 3. Mutable"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create a new "dictionary" as a simple JavaScript object\nconst addressDict = {\n  street: "1 Main st.",\n  city: "San Francisco",\n};\n\n// Create a new mutable document and add the dictionary to its properties\nconst mutableDoc = new MutableDocument("doc1");\nmutableDoc.setDictionary("address", addressDict);\n\n// Simulate saving the document\nawait collection.save(mutableDoc);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-arrays",children:"Using Arrays"}),"\n",(0,a.jsx)(n.h4,{id:"example-4-read-only",children:"Example 4. Read Only"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Getting a phones array from the document's properties\nconst phonesArray = document.data.phones;\n\n// Get element count\nconst count = phonesArray.length;\n\n// Access an array element by index\nif (count >= 1) { \n  const phone = phonesArray[1]; \n  console.log(`Second phone: ${phone}`);\n}\n\n// Iterate over the array\nphonesArray.forEach((item, index) => {\n  console.log(`Item ${index} = ${item}`);\n});\n\n// Create a mutable copy of the array\nconst mutableArray = [...phonesArray];\n"})}),"\n",(0,a.jsx)(n.h4,{id:"example-5-mutable",children:"Example 5. Mutable"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Create a new mutable document\nconst document = new MutableDocument();\n\n// Prepare the data for the array\nconst phones = ["650-000-0000", "650-000-0001"];\n\n// Assign the array to a key in the document\ndoc.setArray("phones", phones);\n\n// Save the document with the new array to the database\nawait collection.save(doc);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"using-blobs",children:"Using Blobs"}),"\n",(0,a.jsxs)(n.p,{children:["For more on working with blobs, see ",(0,a.jsx)(n.a,{href:"/blobs",children:"Blobs"})]}),"\n",(0,a.jsx)(n.h2,{id:"document-initializers",children:"Document Initializers"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"MutableDocument"})," constructor can be used to create a new document where the document ID is randomly generated by the database."]}),"\n",(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.code,{children:"MutableDocument('specific_id')"})," initializer to create a new document with a specific ID."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Collection.document"})," method can be used to get a document. If it doesn't exist in the collection, it will return null. This method can be used to check if a document with a given ID already exists in the collection."]}),"\n",(0,a.jsx)(n.h4,{id:"example-6-persist-a-document",children:"Example 6. Persist a document"}),"\n",(0,a.jsx)(n.p,{children:"The following code example creates a document and persists it to the database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Create a new MutableDocument instance\nconst document = new MutableDocument();\n\n// Set various fields on the document\ndocument.setString('type', 'task');\ndocument.setString('owner', 'todo');\ndocument.setDate('createdAt', new Date());\n\n// Persist the document to the database\nawait collection.save(document);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"document-change-events",children:"Document change events"}),"\n",(0,a.jsx)(n.p,{children:"It is possible to register for document changes. The following example registers for changes to the document with ID user.john and prints the verified_account property when a change is detected."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const token = collection.addDocumentChangeListener('user.john', async (change) => {\n  const document = await collection.document(change.documentID);\n  if (document !== null) {\n    console.log(`Status: ${document.getString('verified_account')}`);\n  }\n});\n\n// Remove the change listener when it is no longer needed\nawait collection.removeDocumentChangeListener(token);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"document-constraints",children:"Document Constraints"}),"\n",(0,a.jsx)(n.p,{children:"Couchbase Lite APIs do not explicitly disallow the use of attributes with the underscore prefix at the top level of document. This is to facilitate the creation of documents for use either in local only mode where documents are not synced."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"_id"}),", ",(0,a.jsx)(n.code,{children:"_rev"})," and ",(0,a.jsx)(n.code,{children:"_sequence"})," are reserved keywords and must not be used as top-level attributes \u2014 see ",(0,a.jsx)(n.a,{href:"#example-13-reserved-keys-list",children:"Example 13"}),"."]})}),"\n",(0,a.jsx)(n.h4,{id:"example-13-reserved-keys-list",children:"Example 13. Reserved Keys List"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_attachments"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_deleted"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_id"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_removed"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_rev"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"_sequence"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(6540);const s={},i=a.createContext(s);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);