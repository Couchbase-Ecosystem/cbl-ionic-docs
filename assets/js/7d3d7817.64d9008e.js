"use strict";(self.webpackChunkcbl_ionic=self.webpackChunkcbl_ionic||[]).push([[250],{6211:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=i(4848),r=i(8453);const o={id:"peer-to-peer",sidebar_position:3},s="Peer-to-Peer Sync",c={id:"DataSync/peer-to-peer",title:"Peer-to-Peer Sync",description:"Description - Couchbase Lite for Ionic\u2009\u2014\u2009Synchronizing data changes between devices in a peer-to-peer network",source:"@site/docs/DataSync/peer-to-peer.md",sourceDirName:"DataSync",slug:"/DataSync/peer-to-peer",permalink:"/DataSync/peer-to-peer",draft:!1,unlisted:!1,editUrl:"https://github.com/Couchbase-Ecosystem/cbl-ionic-docs/docs/DataSync/peer-to-peer.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"peer-to-peer",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Remote Sync",permalink:"/DataSync/remote-sync-gateway"},next:{title:"Migration",permalink:"/migration"}},a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"Creating a Listener",id:"creating-a-listener",level:3},{value:"Connecting to the Listener",id:"connecting-to-the-listener",level:3},{value:"Authentication Options",id:"authentication-options",level:2},{value:"Basic Authentication",id:"basic-authentication",level:3},{value:"Server-Side Configuration",id:"server-side-configuration",level:4},{value:"Client-Side Configuration",id:"client-side-configuration",level:4},{value:"Certificate-Based Authentication",id:"certificate-based-authentication",level:3},{value:"TLS Configuration",id:"tls-configuration",level:2},{value:"Self-Signed Certificates",id:"self-signed-certificates",level:3},{value:"Server Configuration",id:"server-configuration",level:4},{value:"Accepting Self-Signed Certificates on Client",id:"accepting-self-signed-certificates-on-client",level:3},{value:"Client Configuration",id:"client-configuration",level:4},{value:"Using Pre-Existing Certificates",id:"using-pre-existing-certificates",level:3},{value:"iOS Implementation",id:"ios-implementation",level:4},{value:"TLS Identity Management",id:"tls-identity-management",level:3},{value:"Deleting a TLS Identity",id:"deleting-a-tls-identity",level:4},{value:"Platform-Specific Notes",id:"platform-specific-notes",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Security - Best Practices",id:"security---best-practices",level:2}];function d(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"peer-to-peer-sync",children:"Peer-to-Peer Sync"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Description - ",(0,t.jsx)(n.em,{children:"Couchbase Lite for Ionic\u2009\u2014\u2009Synchronizing data changes between devices in a peer-to-peer network"})]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"All code examples are indicative only. They demonstrate the basic concepts and approaches to using a feature. Use them as inspiration and adapt these examples to best practice when developing applications for your platform."})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Couchbase Lite for Ionic provides API support for secure, bi-directional synchronization of data changes between mobile applications in a peer-to-peer network. This allows devices to synchronize data directly with each other without requiring a central server."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"replicator"})," is designed to manage replication of documents and document changes between a source and a target database. In a peer-to-peer scenario, each device acts as both a client and a server, enabling direct data synchronization between devices."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"replicator"})," is the ",(0,t.jsx)(n.strong,{children:"Active Peer"})," (client) and the ",(0,t.jsx)(n.strong,{children:"URL endpoint listener"})," is the ",(0,t.jsx)(n.strong,{children:"Passive Peer"})," (server). The active peer initiates the replication and the passive peer listens for incoming replication requests."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before implementing peer-to-peer sync, ensure you have:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Couchbase Lite for Ionic installed in your project"}),"\n",(0,t.jsx)(n.li,{children:"Network connectivity between devices"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-listener",children:"Creating a Listener"}),"\n",(0,t.jsx)(n.p,{children:"To set up a listener that other peers can connect to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { URLEndpointListener } from 'cblite-js';\n\n// Create and start a listener\nconst listener = await URLEndpointListener.create({\n  collections: [{\n    databaseName: 'mydb',\n    scopeName: '_default',\n    name: '_default'\n  }],\n  port: port, // Choose an available port\n  networkInterface: networkInterface, // '0.0.0.0' for all interfaces\n});\n\nawait listener.start();\nconsole.log(`Listener started on port ${listener.getPort()}`);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"connecting-to-the-listener",children:"Connecting to the Listener"}),"\n",(0,t.jsx)(n.p,{children:"To connect to the listener from another device:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Replicator, ReplicatorConfiguration, URLEndpoint, ReplicatorType } from 'cblite-js';\n\nconst endpoint = new URLEndpoint('ws://192.168.1.100:4988/mydb');\nconst config = new ReplicatorConfiguration(endpoint);\nconfig.addCollection(collection);\nconfig.setReplicatorType(ReplicatorType.PUSH_AND_PULL);\n\nconst replicator = await Replicator.create(config);\n\n// Monitor replication status\nconst token = await replicator.addChangeListener((change) => {\n  console.log('Status:', change.status.getActivityLevel());\n  if (change.status.getError()) {\n    console.error('Error:', change.status.getError());\n  }\n});\n\nawait replicator.start();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"authentication-options",children:"Authentication Options"}),"\n",(0,t.jsx)(n.h3,{id:"basic-authentication",children:"Basic Authentication"}),"\n",(0,t.jsx)(n.p,{children:"Basic authentication provides a simple username/password mechanism for securing access to your listener."}),"\n",(0,t.jsx)(n.h4,{id:"server-side-configuration",children:"Server-Side Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { URLEndpointListener } from 'cblite-js';\n\nconst listener = await URLEndpointListener.create({\n  // ... other listener config\n  authenticatorConfig: {\n    type: 'basic',\n    data: {\n      username: 'admin',\n      password: 'securepassword123'\n    }\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"client-side-configuration",children:"Client-Side Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Replicator, ReplicatorConfiguration, URLEndpoint, BasicAuthenticator } from 'cblite-js';\n\nconst endpoint = new URLEndpoint('ws://192.168.1.100:4988/mydb');\nconst config = new ReplicatorConfiguration(endpoint);\n// ... other config\n\n// Set basic authentication\nconfig.setAuthenticator(new BasicAuthenticator('admin', 'securepassword123'));\n\nconst replicator = await Replicator.create(config);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"certificate-based-authentication",children:"Certificate-Based Authentication"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Certificate-based authentication is not yet implemented in the current version."})}),"\n",(0,t.jsx)(n.h2,{id:"tls-configuration",children:"TLS Configuration"}),"\n",(0,t.jsx)(n.p,{children:"TLS (Transport Layer Security) encrypts the connection between peers, ensuring that all data transmitted between devices is secure and cannot be intercepted by third parties. Couchbase Lite provides flexible TLS configuration options to meet various security requirements."}),"\n",(0,t.jsxs)(n.admonition,{title:"Development Only",type:"caution",children:[(0,t.jsxs)(n.p,{children:["For development and testing purposes, you may choose to disable TLS. ",(0,t.jsx)(n.strong,{children:"This is not recommended for production environments"})," as it leaves your data vulnerable to interception. To disable TLS, set ",(0,t.jsx)(n.code,{children:"disableTLS: true"})," in your listener configuration."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const listener = await URLEndpointListener.create({\n  // ... other config\n  disableTLS: true  // Only for development!\n});\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"self-signed-certificates",children:"Self-Signed Certificates"}),"\n",(0,t.jsx)(n.p,{children:"Self-signed certificates provide a quick way to enable TLS encryption without requiring a certificate authority (CA). They're ideal for development and testing, though production environments should consider using certificates from a trusted CA."}),"\n",(0,t.jsx)(n.h4,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,t.jsx)(n.p,{children:"When creating a self-signed certificate, you'll need to specify:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"label"}),": A unique identifier for the certificate"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"expiration"}),": Certificate validity period (ISO 8601 format)"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"On iOS, the expiration date can be in the past without triggering an error. However, on Android, if the expiration date is in the past, an error will be thrown."})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"attributes"}),": Certificate metadata including organization details"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { URLEndpointListener } from 'cblite-js';\n\nconst listener = await URLEndpointListener.create({\n  // ... other config\n  tlsIdentityConfig: {\n    mode: 'selfSigned',\n    label: 'my-server-identity',  // Unique identifier for this certificate\n    expiration: '2030-01-01T00:00:00.000Z', // Certificate expiration date (ISO 8601 format)\n    attributes: {\n      certAttrCommonName: 'My Server',       // Server's common name (e.g., hostname)\n      certAttrOrganization: 'My Company',    // Your organization name\n      certAttrOrganizationUnit: 'Mobile',\n      certAttrEmailAddress: 'admin@mycompany.com'\n    }\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"accepting-self-signed-certificates-on-client",children:"Accepting Self-Signed Certificates on Client"}),"\n",(0,t.jsx)(n.p,{children:"When connecting to a server using a self-signed certificate, the client must be configured to trust it. This is typically needed in development and testing environments where you're using self-signed certificates instead of certificates from a trusted Certificate Authority (CA)."}),"\n",(0,t.jsx)(n.h4,{id:"client-configuration",children:"Client Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const config = new ReplicatorConfiguration(endpoint);\n// ... other configuration options\n\n// Configure the client to accept self-signed certificates\nconfig.setAcceptOnlySelfSignedCerts(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-pre-existing-certificates",children:"Using Pre-Existing Certificates"}),"\n",(0,t.jsx)(n.p,{children:"For production environments, you might want to use certificates signed by a trusted Certificate Authority (CA) or certificates generated by your organization's PKI. Couchbase Lite supports importing these certificates, though with platform-specific limitations."}),"\n",(0,t.jsx)(n.admonition,{title:"Platform Limitations",type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"iOS"}),": Full support for importing existing certificates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Android"}),": Not supported in the current version"]}),"\n"]})}),"\n",(0,t.jsx)(n.h4,{id:"ios-implementation",children:"iOS Implementation"}),"\n",(0,t.jsx)(n.p,{children:"On iOS, you can import existing PKCS#12 (.p12) certificates. This is useful when you need to use certificates issued by your organization's PKI or a public CA."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { URLEndpointListener } from 'cblite-js';\n\n// The certificate should be in PKCS#12 format and Base64 encoded\nconst pkcs12Data = 'BASE64_ENCODED_PKCS12_CERTIFICATE';\n\nconst listener = await URLEndpointListener.create({\n  // ... other listener configuration\n  tlsIdentityConfig: {\n    mode: 'imported',\n    label: 'my-imported-identity',  // Unique identifier for this identity\n    password: 'your-secure-password', // Password used to protect the PKCS#12 file\n    certBase64: pkcs12Data  // Base64 encoded PKCS#12 certificate\n  }\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Provide the pinned certificate to the client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Replicator, ReplicatorConfiguration, URLEndpoint } from 'cblite-js';\n\nconst pinnedCert = 'BASE64_ENCODED_PINNED_CERTIFICATE';\n\nconst config = new ReplicatorConfiguration(endpoint);\n// ... other config\n\n// Set pinned certificate\nconfig.setPinnedServerCertificate(pinnedCert);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tls-identity-management",children:"TLS Identity Management"}),"\n",(0,t.jsx)(n.h4,{id:"deleting-a-tls-identity",children:"Deleting a TLS Identity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\n  await URLEndpointListener.deleteIdentity({ \n    label: 'my-server-identity' \n  });\n} catch (error) {\n  console.error('Failed to delete identity:', error);\n  // On Android this is not supported and will throw an error\n}  \n"})}),"\n",(0,t.jsx)(n.h3,{id:"platform-specific-notes",children:"Platform-Specific Notes"}),"\n",(0,t.jsx)(n.h4,{id:"ios",children:"iOS"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Full TLS support including self-signed and imported certificates"}),"\n",(0,t.jsx)(n.li,{children:"Uses secure keychain for certificate storage"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"android",children:"Android"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Limited to self-signed certificates"}),"\n",(0,t.jsx)(n.li,{children:"Cannot import existing certificates"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deleteIdentity"})," is a no-op"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security---best-practices",children:"Security - Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always use TLS in production environments"}),"\n",(0,t.jsx)(n.li,{children:"Never hardcode credentials in your application"}),"\n",(0,t.jsx)(n.li,{children:"Use strong passwords for certificates"}),"\n",(0,t.jsx)(n.li,{children:"Rotate certificates periodically"}),"\n",(0,t.jsx)(n.li,{children:"Validate server certificates on the client side"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);